{"version":3,"sources":["actions/index.js","actions/actionTypes.js","views/index.js","views/normal.js","views/preferencial.js","App.js","serviceWorker.js","reducers/clickReducer.js","reducers/index.js","store/index.js","index.js"],"names":["clickButtonPreferencial","type","clickButtonNormal","Index","_this$props","this","props","totalPreferencial","totalNormal","react_default","a","createElement","Grid","textAlign","style","height","verticalAlign","Column","Segment","padded","className","inverted","Header","as","content","color","fontSize","fontWeight","marginBottom","marginTop","size","Button","Group","fluid","labelPosition","Label","basic","pointing","Link","to","onClick","Icon","name","React","Component","connect","store","clickReducer","dispatch","bindActionCreators","Normal","lib_default","value","renderAs","includeMargin","circular","icon","Preferencial","App","react_router_dom","Container","react_router","path","exact","component","Boolean","window","location","hostname","match","initialState","Reducers","combineReducers","state","arguments","length","undefined","Object","objectSpread","Store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+WAEaA,EAA0B,iBAAO,CAC1CC,KCHqC,8BDM5BC,EAAoB,iBAAO,CACpCD,KCN+B,wBCM7BE,mLAEO,IAAAC,EACkFC,KAAKC,MAApFC,EADHH,EACGG,kBAAmBC,EADtBJ,EACsBI,YAAaN,EADnCE,EACmCF,kBAAmBF,EADtDI,EACsDJ,wBAC3D,OAEIS,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,SAASC,MAAO,CAAEC,OAAQ,QAAUC,cAAc,UAE9DP,EAAAC,EAAAC,cAACC,EAAA,EAAKK,OAAN,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACIC,OAAO,OACPC,UAAU,gBACVC,UAAQ,GAERZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIC,GAAG,KACHC,QAAQ,aACRC,MAAM,QACNJ,UAAQ,EACRP,MAAO,CACHY,SAAU,MACVC,WAAY,OACZC,aAAc,EACdC,UAAW,SAGnBpB,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAQQ,KAAK,QAAb,2CACArB,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAACoB,EAAA,EAAOC,MAAR,CAAcC,OAAK,EAACH,KAAK,WACrBrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQR,GAAG,MAAMW,cAAc,QAC3BzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOZ,GAAG,IAAIa,OAAK,EAACX,MAAM,OAAOY,SAAS,SAAS9B,GACnDE,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQN,MAAM,OAAOF,GAAIe,IAAMC,GAAG,gBAC9BC,QAAS,kBAAMxC,MACfS,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAMC,KAAK,qBAFf,iBAMJjC,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQR,GAAG,MAAMW,cAAc,SAE3BzB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQN,MAAM,QAAQF,GAAIe,IAAMC,GAAG,UAC/BC,QAAS,kBAAMtC,MADnB,UAIAO,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOZ,GAAG,IAAIa,OAAK,EAACX,MAAM,QAAQY,SAAS,QAAQ7B,eA3C/DmC,IAAMC,WA6DXC,cARS,SAAAC,GAAK,MAAK,CAC9BvC,kBAAmBuC,EAAMC,aAAaxC,kBACtCC,YAAasC,EAAMC,aAAavC,cAGT,SAAAwC,GAAQ,OAC/BC,YAAmB,CAAE/C,oBAAmBF,2BAA2BgD,IAExDH,CAA6C1C,oBC5DtD+C,mLACO,IACG1C,EAAgBH,KAAKC,MAArBE,YAER,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,SAASC,MAAO,CAAEC,OAAQ,QAAUC,cAAc,UAC9DP,EAAAC,EAAAC,cAACC,EAAA,EAAKK,OAAN,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACIC,OAAO,OACPE,UAAQ,EACRD,UAAU,iBACVX,EAAAC,EAAAC,cAAA,uFACAF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIC,GAAG,KACHC,QAAS,KAAOhB,EAChBa,UAAQ,EACRI,MAAM,QACNX,MAAO,CACHY,SAAU,MACVC,WAAY,SACZC,aAAc,EACdC,UAAW,SAGnBpB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CAAQ0C,MAAO,KAAO5C,EAAa6C,SAAS,MAAMvB,KAAM,IAAKwB,eAAe,KAEhF7C,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQwB,UAAQ,EAAChC,GAAIe,IAAMC,GAAG,IAAIT,KAAK,UAAUN,QAAQ,YAASC,MAAM,QAAQ+B,KAAK,kBA3BpFb,IAAMC,WAsCZC,cAJS,SAAAC,GAAK,MAAK,CAC9BtC,YAAasC,EAAMC,aAAavC,cAGrBqC,CAAyBK,GCtClCO,mLACO,IACGlD,EAAsBF,KAAKC,MAA3BC,kBAER,OACIE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,SAASC,MAAO,CAAEC,OAAQ,QAAUC,cAAc,UAC9DP,EAAAC,EAAAC,cAACC,EAAA,EAAKK,OAAN,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CACIC,OAAO,OACPE,UAAQ,EACRD,UAAU,iBACVX,EAAAC,EAAAC,cAAA,uFACAF,EAAAC,EAAAC,cAACW,EAAA,EAAD,CACIC,GAAG,KACHC,QAAS,KAAOjB,EAChBc,UAAQ,EACRI,MAAM,OACNX,MAAO,CACHY,SAAU,MACVC,WAAY,SACZC,aAAc,EACdC,UAAW,SAGnBpB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CAAQ0C,MAAO,KAAO7C,EAAmB8C,SAAS,MAAMvB,KAAM,IAAKwB,eAAe,KAGtF7C,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQwB,UAAQ,EAAChC,GAAIe,IAAMC,GAAG,IAAIT,KAAK,UAAUN,QAAQ,YAASC,MAAM,QAAQ+B,KAAK,kBA5B9Eb,IAAMC,WAuClBC,cAJS,SAAAC,GAAK,MAAK,CAC9BvC,kBAAmBuC,EAAMC,aAAaxC,oBAG3BsC,CAAyBY,GCtBzBC,MAZf,WACE,OACEjD,EAAAC,EAAAC,cAACgD,EAAA,EAAD,KACElD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,KACEnD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW7D,IACjCM,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAOC,KAAK,iBAAiBE,UAAWP,IACxChD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAOC,KAAK,WAAWE,UAAWd,OCPtBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uEChBAC,EAAe,CACjB/D,kBAAmB,EACnBC,YAAa,GCDJ+D,EAAWC,YAAgB,CACpCzB,aDGwB,WAAkC,IAAjC0B,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBJ,EACjC,QAD0DI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC3C3E,MACX,INR2B,sBMSvB,OAAO4E,OAAAC,EAAA,EAAAD,CAAA,GACAJ,EADP,CAEIjE,YAAaiE,EAAMjE,YAAc,IAEzC,INdiC,4BMe7B,OAAOqE,OAAAC,EAAA,EAAAD,CAAA,GACAJ,EADP,CAEIlE,kBAAmBkE,EAAMlE,kBAAoB,IAErD,QACI,OAAOkE,MEjBNM,EAAQC,YAAYT,UCOjCU,IAASC,OACLzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAUrC,MAAOiC,GACbtE,EAAAC,EAAAC,cAACyE,EAAD,OAGJC,SAASC,eAAe,SJkHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a72ac7d4.chunk.js","sourcesContent":["import { CLICK_UPDATE_PREFERENCIAL, CLICK_UPDATE_NORMAL } from './actionTypes';\n\nexport const clickButtonPreferencial = () => ({\n    type: CLICK_UPDATE_PREFERENCIAL\n});\n\nexport const clickButtonNormal = () => ({\n    type: CLICK_UPDATE_NORMAL,\n});","export const CLICK_UPDATE_PREFERENCIAL = 'CLICK_UPDATE_PREFERENCIAL';\nexport const CLICK_UPDATE_NORMAL = 'CLICK_UPDATE_NORMAL';","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Grid, Segment, Button, Label, Header, Icon } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { clickButtonPreferencial, clickButtonNormal } from '../actions';\n\nclass Index extends React.Component {\n\n    render() {\n        const { totalPreferencial, totalNormal, clickButtonNormal, clickButtonPreferencial } = this.props;\n        return (\n\n            <Grid textAlign='center' style={{ height: '100%' }} verticalAlign='middle'>\n\n                <Grid.Column>\n                    <Segment\n                        padded=\"very\"\n                        className=\"painel-shadow\"\n                        inverted>\n\n                        <Header\n                            as='h1'\n                            content='Bem-vindo!'\n                            color='green'\n                            inverted\n                            style={{\n                                fontSize: '4em',\n                                fontWeight: 'bolt',\n                                marginBottom: 0,\n                                marginTop: '1em',\n                            }}\n                        />\n                        <Header size=\"huge\">Escolha uma opção de Atendimento!</Header>\n                        <br /><br />\n                        <Button.Group fluid size=\"massive\">\n                            <Button as='div' labelPosition='left' >\n                                <Label as='a' basic color='blue' pointing='right'>{totalPreferencial}</Label>\n                                <Button color=\"blue\" as={Link} to='/preferencial'\n                                    onClick={() => clickButtonPreferencial()}>\n                                    <Icon name='universal access' />\n                                    Preferencial\n          </Button>\n                            </Button>\n                            <Button as='div' labelPosition='right' >\n\n                                <Button color=\"green\" as={Link} to='/normal'\n                                    onClick={() => clickButtonNormal()}>\n                                    Normal\n          </Button>\n                                <Label as='a' basic color='green' pointing='left'>{totalNormal}</Label>\n                            </Button>\n                        </Button.Group>\n                    </Segment>\n                </Grid.Column>\n            </Grid >\n        )\n    }\n};\n\nconst mapStateToProps = store => ({\n    totalPreferencial: store.clickReducer.totalPreferencial,\n    totalNormal: store.clickReducer.totalNormal\n});\n\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators({ clickButtonNormal, clickButtonPreferencial }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","import React from 'react';\nimport QRCode from 'qrcode.react'\nimport { Link } from \"react-router-dom\";\nimport { Grid, Segment, Button, Header } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\n\n\n\nclass Normal extends React.Component {\n    render() {\n        const { totalNormal } = this.props;\n\n        return (\n            <Grid textAlign='center' style={{ height: '100%' }} verticalAlign='middle'>\n                <Grid.Column>\n                    <Segment\n                        padded=\"very\"\n                        inverted\n                        className=\"painel-shadow\">\n                        <h1>Insira o código abaixo ou use a opção QR Code no seu aplicativo:</h1>\n                        <Header\n                            as='h1'\n                            content={\"NR\" + totalNormal}\n                            inverted\n                            color=\"green\"\n                            style={{\n                                fontSize: '4em',\n                                fontWeight: 'normal',\n                                marginBottom: 0,\n                                marginTop: '1em',\n                            }}\n                        />\n                        <br />\n                        <QRCode value={\"NR\" + totalNormal} renderAs='svg' size={256} includeMargin={true} />\n                    </Segment>\n                    <Button circular as={Link} to='/' size=\"massive\" content=\"início\" color=\"black\" icon='home' />\n                </Grid.Column>\n            </Grid>\n        )\n    }\n};\n\nconst mapStateToProps = store => ({\n    totalNormal: store.clickReducer.totalNormal\n});\n\nexport default connect(mapStateToProps)(Normal);","import React from 'react';\nimport QRCode from 'qrcode.react'\nimport { Link } from \"react-router-dom\";\nimport { Grid, Segment, Button, Header } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\n\n\n\nclass Preferencial extends React.Component {\n    render() {\n        const { totalPreferencial } = this.props;\n\n        return (\n            <Grid textAlign='center' style={{ height: '100%' }} verticalAlign='middle'>\n                <Grid.Column>\n                    <Segment\n                        padded=\"very\"\n                        inverted\n                        className=\"painel-shadow\">\n                        <h1>Insira o código abaixo ou use a opção QR Code no seu aplicativo:</h1>\n                        <Header\n                            as='h1'\n                            content={\"PR\" + totalPreferencial}\n                            inverted\n                            color=\"blue\"\n                            style={{\n                                fontSize: '4em',\n                                fontWeight: 'normal',\n                                marginBottom: 0,\n                                marginTop: '1em',\n                            }}\n                        />\n                        <br />\n                        <QRCode value={\"PR\" + totalPreferencial} renderAs='svg' size={256} includeMargin={true} />\n\n                    </Segment>\n                    <Button circular as={Link} to='/' size=\"massive\" content=\"início\" color=\"black\" icon='home' />\n                </Grid.Column>\n            </Grid>\n        )\n    }\n};\n\nconst mapStateToProps = store => ({\n    totalPreferencial: store.clickReducer.totalPreferencial\n});\n\nexport default connect(mapStateToProps)(Preferencial);","import React from 'react';\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport './App.css';\n\n\nimport { Container } from 'semantic-ui-react'\n\nimport Index from './views/index';\nimport Normal from './views/normal';\nimport Preferencial from './views/preferencial';\n\nfunction App() {\n  return (\n    <Router>\n      <Container>\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/preferencial/\" component={Preferencial} />\n        <Route path=\"/normal/\" component={Normal} />\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CLICK_UPDATE_PREFERENCIAL, CLICK_UPDATE_NORMAL } from '../actions/actionTypes';\n\nconst initialState = {\n    totalPreferencial: 0,\n    totalNormal: 0,\n};\n\nexport const clickReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case CLICK_UPDATE_NORMAL:\n            return {\n                ...state,\n                totalNormal: state.totalNormal + 1\n            };\n        case CLICK_UPDATE_PREFERENCIAL:\n            return {\n                ...state,\n                totalPreferencial: state.totalPreferencial + 1\n            }\n        default:\n            return state;\n    }\n};","import { clickReducer } from './clickReducer';\nimport { combineReducers } from 'redux';\n\nexport const Reducers = combineReducers({\n    clickReducer: clickReducer\n});","import { createStore } from 'redux';\nimport { Reducers } from '../reducers';\n\nexport const Store = createStore(Reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { Store } from './store';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n    <Provider store={Store}>\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}